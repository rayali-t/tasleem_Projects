/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.InsurorRole;

import Business.EcoSystem;
import Business.Enterprise.EnterpriseDirectory;
import Business.Organization.HumanResource;
import Business.Organization.Organization;
import Business.Organization.ReliefFundOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ClaimFundsWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tashu
 */
public class InsurorRoleWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private HumanResource humanResource;
    private ReliefFundOrganization reliefFund;
    private EnterpriseDirectory enterpriseDirectory;

    /**
     * Creates new form InsurorRoleWorkAreaJPanel
     */
    public InsurorRoleWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.enterpriseDirectory = business.getNetworkList().get(0).getEnterpriseDirectory();

        this.reliefFund = (ReliefFundOrganization) organization;
//        valueLabel1.setText(reliefFund.getName());
        populateInsurorTable();
        populateHistoricInsurorRequests();
    }

    public void populateHistoricInsurorRequests() {
        DefaultTableModel model = (DefaultTableModel) tblInsurorComplRequests.getModel();

        model.setRowCount(0);
        for (WorkRequest request : reliefFund.getWorkQueue().getWorkRequestList()) {
            if (request != null) {
                Object[] row = new Object[6];
                ClaimFundsWorkRequest claimReq = (ClaimFundsWorkRequest) request;
                if ((request.getStatus().equals("Rejected")) || (request.getStatus().equals("Completed"))) {
                    row[0] = request;
                    row[1] = request.getCost();
                    row[2] = request.getRequestDate();
                    row[3] = request.getSender() == null ? null : request.getSender().getEmployee().getName();
                    row[4] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                    row[5] = request.getStatus();

                    model.addRow(row);
                }
            }
        }
    }

    public void populateInsurorTable() {
        DefaultTableModel model = (DefaultTableModel) tblInsurorRequests.getModel();

        model.setRowCount(0);
        for (WorkRequest request : reliefFund.getWorkQueue().getWorkRequestList()) {
            if (request != null) {
                Object[] row = new Object[6];
                ClaimFundsWorkRequest claimReq = (ClaimFundsWorkRequest) request;
                if (!((request.getStatus().equals("Rejected")) || (request.getStatus().equals("Completed")))) {
                    row[0] = request;
                    row[1] = request.getCost();
                    row[2] = request.getRequestDate();
                    row[3] = request.getSender() == null ? null : request.getSender().getEmployee().getName();
                    row[4] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                    row[5] = request.getStatus();

                    model.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblInsurorRequests = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblInsurorComplRequests = new javax.swing.JTable();
        viewJButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 255));
        jLabel3.setText("Requests Pending for your action :");

        tblInsurorRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Amount", "Date", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInsurorRequests.setSelectionBackground(new java.awt.Color(0, 153, 255));
        jScrollPane3.setViewportView(tblInsurorRequests);
        if (tblInsurorRequests.getColumnModel().getColumnCount() > 0) {
            tblInsurorRequests.getColumnModel().getColumn(0).setResizable(false);
            tblInsurorRequests.getColumnModel().getColumn(3).setResizable(false);
        }

        assignJButton.setBackground(new java.awt.Color(0, 153, 255));
        assignJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setBackground(new java.awt.Color(0, 153, 255));
        processJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 255));
        jLabel4.setText("Completed Requests :");

        tblInsurorComplRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Amount", "Date", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblInsurorComplRequests);

        viewJButton1.setBackground(new java.awt.Color(0, 153, 255));
        viewJButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewJButton1.setForeground(new java.awt.Color(255, 255, 255));
        viewJButton1.setText("View");
        viewJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButton1ActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("INSUROR DASHBOARD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(295, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(assignJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(processJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(viewJButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addGap(90, 90, 90)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(processJButton))
                .addGap(42, 42, 42)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewJButton1)
                .addGap(37, 37, 37))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = tblInsurorRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request.");
            return;
        }

        WorkRequest request = (WorkRequest) tblInsurorRequests.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        populateInsurorTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblInsurorRequests.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request.");
            return;
        }

        ClaimFundsWorkRequest request = (ClaimFundsWorkRequest) tblInsurorRequests.getValueAt(selectedRow, 0);
//        JOptionPane.showMessageDialog(null, request.getSender().getRole().toString());
//        request.setStatus("Processing");

        ProcessClaimWorkRequest processWorkRequestJPanel = new ProcessClaimWorkRequest(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_processJButtonActionPerformed

    private void viewJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblInsurorComplRequests.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request.");
            return;
        }

        ClaimFundsWorkRequest request = (ClaimFundsWorkRequest) tblInsurorComplRequests.getValueAt(selectedRow, 0);

        ViewCompletedClaimRequest processWorkRequestJPanel = new ViewCompletedClaimRequest(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewJButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable tblInsurorComplRequests;
    private javax.swing.JTable tblInsurorRequests;
    private javax.swing.JButton viewJButton1;
    // End of variables declaration//GEN-END:variables
}
