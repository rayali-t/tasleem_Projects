/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.TransporterRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Network.Network;
import Business.Organization.HumanResource;
import Business.Organization.Organization;
import Business.Organization.TransportOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PackageDeliveryWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Eshanee Thakur
 */
public class TransporterWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private TransportOrganization transport;
    private Network network;

    /**
     * Creates new form TransporterWorkAreaJPanel
     */
    public TransporterWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.network = business.getNetworkList().get(0);
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.transport = (TransportOrganization) organization;
//        valueLabel.setText(transport.getName());

        populateDeliveryRequestTable();
        populateDeliveryProgressTable();
    }

    public void populateDeliveryProgressTable() {
        DefaultTableModel model = (DefaultTableModel) tblDeliveryProgress.getModel();
        model.setRowCount(0);

        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (ent instanceof NGOEnterprise) {
                for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof HumanResource) {
                        for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                            if (request instanceof PackageDeliveryWorkRequest) {
                                Object[] row = new Object[5];
                                row[0] = ((PackageDeliveryWorkRequest) request).getDestination();
                                row[1] = ((PackageDeliveryWorkRequest) request).getPackageName();
                                row[2] = ((PackageDeliveryWorkRequest) request).getDriverName();
                                row[3] = ((PackageDeliveryWorkRequest) request).getCarNumber();
                                row[4] = request.getStatus();
                                model.addRow(row);
                            }
                        }
                    }
                }
            }
        }
    }

    public void populateDeliveryRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblDeliveryRequests.getModel();
        model.setRowCount(0);

        TableColumn tc = tblDeliveryRequests.getColumnModel().getColumn(0);
        tc.setCellEditor(tblDeliveryRequests.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(tblDeliveryRequests.getDefaultRenderer(Boolean.class));
        for (WorkRequest request : transport.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];
            row[1] = request.getArea();
            row[2] = request;
            row[3] = request.getItemCount();
            row[4] = request.getStatus();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDeliveryRequests = new javax.swing.JTable();
        btnRefreshRequests = new javax.swing.JButton();
        btnSendTransport = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDeliveryProgress = new javax.swing.JTable();
        btnRefreshDelivery = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("Requests Pending for your action :");

        tblDeliveryRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "Area", "Item Name", "Item Count", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDeliveryRequests);
        tblDeliveryRequests.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tblDeliveryRequests.getColumnModel().getColumnCount() > 0) {
            tblDeliveryRequests.getColumnModel().getColumn(0).setHeaderValue("Select");
        }

        btnRefreshRequests.setBackground(new java.awt.Color(0, 153, 255));
        btnRefreshRequests.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnRefreshRequests.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshRequests.setText("Refresh");
        btnRefreshRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshRequestsActionPerformed(evt);
            }
        });

        btnSendTransport.setBackground(new java.awt.Color(0, 153, 255));
        btnSendTransport.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSendTransport.setForeground(new java.awt.Color(255, 255, 255));
        btnSendTransport.setText("Ready for Transport");
        btnSendTransport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendTransportActionPerformed(evt);
            }
        });

        tblDeliveryProgress.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Area", "Package", "Driver", "Car No", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblDeliveryProgress);

        btnRefreshDelivery.setBackground(new java.awt.Color(0, 153, 255));
        btnRefreshDelivery.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnRefreshDelivery.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshDelivery.setText("Refresh");
        btnRefreshDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDeliveryActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 255));
        jLabel2.setText("Shipped Packages:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TRANSPORTER DASHBOARD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(694, 694, 694)
                        .addComponent(btnRefreshDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSendTransport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefreshRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnRefreshRequests)
                    .addComponent(btnSendTransport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnRefreshDelivery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshRequestsActionPerformed
        populateDeliveryRequestTable();
    }//GEN-LAST:event_btnRefreshRequestsActionPerformed

    private void btnSendTransportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendTransportActionPerformed
        ArrayList<WorkRequest> selectedRows = new ArrayList<>();

        DefaultTableModel model = (DefaultTableModel) tblDeliveryRequests.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            if (model.getValueAt(row, 0) != null) {
                if (model.getValueAt(row, 0).toString().equalsIgnoreCase("true")) {
                    WorkRequest request = (WorkRequest) model.getValueAt(row, 2);
                    selectedRows.add(request);
                }
            }
        }

        if (selectedRows.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select atleast one package for transport.");
            return;
        }

        //Validation for same destination requests
        String destination = selectedRows.get(0).getArea();
        boolean flagDestination = false;
        for (WorkRequest wr : selectedRows) {
            if (!wr.getArea().equalsIgnoreCase(destination)) {
                flagDestination = true;
                break;
            }
        }
        if (flagDestination) {
            JOptionPane.showMessageDialog(null, "Please select same area requests for transporting.");
            return;
        }

        boolean flagStatus = false;
        for (WorkRequest wr : selectedRows) {
            if (wr.getStatus().equalsIgnoreCase("On the way") || wr.getStatus().equalsIgnoreCase("Received Successfully")) {
                flagStatus = true;
                break;
            }
        }
        if (flagStatus) {
            JOptionPane.showMessageDialog(null, "One or more requests are already completed or are in progress. Please review.");
            return;
        }

        PackageDeliveryJPanel packageDeliveryJPanel = new PackageDeliveryJPanel(userProcessContainer, userAccount, enterprise, network, selectedRows);
        userProcessContainer.add("packageDeliveryJPanel", packageDeliveryJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnSendTransportActionPerformed

    private void btnRefreshDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDeliveryActionPerformed
        populateDeliveryProgressTable();
    }//GEN-LAST:event_btnRefreshDeliveryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefreshDelivery;
    private javax.swing.JButton btnRefreshRequests;
    private javax.swing.JButton btnSendTransport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblDeliveryProgress;
    private javax.swing.JTable tblDeliveryRequests;
    // End of variables declaration//GEN-END:variables
}
